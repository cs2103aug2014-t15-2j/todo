//@author: a0105570n



	/**
	 * origin: todo\command\AddCommand.java
	 */

public class AddCommand implements Command {
	public static String ADD_SUCCESSFUL = "New item added.";
	public static String DESCRIPTION_EMPTY = "Item description is empty, please consider using quotation marks.";
	public static String INVALID_START_DUE = "Due Date is before Start Date";

	private String description;
	private DateTime start;
	private DateTime due;
	private String location;
	private ArrayList<String> tagList;
	private String statusMessage;


	public AddCommand() {

	}

	@Override
	public String execute() throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException {
		Logic logic = Logic.getInstanceLogic();
		
		// empty message check
		if (description.equals(StringUtil.EMPTY_STRING)) {
			statusMessage = DESCRIPTION_EMPTY;
			return statusMessage;
		}

		// start date/time & due date/time validation
		if (this.start != null && this.due != null) {
			if (DateTime.isInValidDate(this.start.getDate(), this.due.getDate())) {
				statusMessage = INVALID_START_DUE;
				return statusMessage;
			}
		}

		// create a new item
		Item newItem = new Item(description, start, due, location, tagList);
		Logic.getItemList().add(newItem);
		statusMessage = ADD_SUCCESSFUL;
		logic.setSystemMessage(statusMessage);
		return statusMessage;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setStart(DateTime start) {
		this.start = start;
	}

	public void setDue(DateTime due) {
		this.due = due;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public void setTagList(ArrayList<String> tagList) {
		this.tagList = tagList;
	}

}

	// End of segment: todo\command\AddCommand.java





	/**
	 * origin: todo\command\Command.java
	 */

public interface Command {
	public String execute() throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException;
}

	// End of segment: todo\command\Command.java





	/**
	 * origin: todo\command\UpdateCommand.java
	 */

public class UpdateCommand implements Command {
	public static String UPDATE_SUCCESSFUL = "Updated.";
	public static String UPDATE_FAILED = "Update failed.";

	private Item item;
	private String description;
	private DateTime start;
	private DateTime due;
	private String location;
	private ArrayList<String> tagList;
	private String statusMessage;

	// when value is true, force to update/delete/clear
	private boolean updateStart;
	private boolean updateDue;
	private boolean updateLocation;
	private boolean cleanTag;
	private boolean updated;

	public UpdateCommand() {
	}

	@Override
	public String execute() {

		// update start date/time
		if (updateStart || start != null) {
			item.setStartDateTime(start);
			updated = true;
		}
		
		// update due date/time
		if (updateDue || due != null) {
			item.setDueDateTime(due);
			updated = true;
		}
		
		// update location
		if (updateLocation || location != StringUtil.EMPTY_STRING) {
			item.setLocation(location);
			updated = true;
		}
		
		// update description
		if (description != null) {
			item.setDescription(description);
			updated = true;
		}
		
		// update tag list
		if (tagList != null && tagList.size() != 0) {
			for (String tag : tagList) {
				if (item.getTags().contains(tag)) {
					item.deleteTaf(tag);
				} else {
					item.addTag(tag);
				}
			}
			updated = true;
		}
		
		// clean tag list
		if (cleanTag) {
			item.setTags(new ArrayList<String>());
			updated = true;
		}

		// check if there is anything updated, then result status
		if (updated) {
			statusMessage = UPDATE_SUCCESSFUL;
		} else {
			statusMessage = UPDATE_FAILED;
		}
		return statusMessage;
	}

	public void setItem(Item item) {
		this.item = item;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setStart(DateTime start) {
		this.start = start;
	}

	public void setDue(DateTime due) {
		this.due = due;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public void setTagList(ArrayList<String> tagList) {
		this.tagList = tagList;
	}

	public void setUpdateStart() {
		this.updateStart = true;
	}

	public void setUpdateDue() {
		this.updateDue = true;
	}

	public void setUpdateLocation() {
		this.updateLocation = true;
	}

	public void setCleanTag() {
		this.cleanTag = true;
	}
}

	// End of segment: todo\command\UpdateCommand.java





	/**
	 * origin: todo\model\Message.java
	 */

/**
 * A Message instance contains a text string
 * There are various methods that can do modification
 * to the string
 *
 */
public class Message {
	public static String LOCATION_SYMBOL = "@";
	public static String LOCATION_SYMBOL_WITH_ESCAPE = "\\\\@";
	public static String TAG_SYMBOL = "#";
	public static String TAG_SYMBOL_WITH_ESCAPE = "\\\\#";
	
	private String text;
	
	public Message(String message){
		this.text = message;
	}
	
	public String getText(){
		return text;
	}
	
	public void setText(String newText){
		this.text = newText;
	}
	
	// correct the date format if any wrong date format found
	public void correctDateFormat(){
		text = StringUtil.correctDateFormat(text);
	}
	
	// return the text without any quoted content
	public String withoutQuotation(){
		return StringUtil.removeQuoted(text);
	}
	
	// return the word before given string in the text
	public String getWordBeforeSubstring(String substring){
		return StringUtil.getWordBeforeSubstring(text,substring);
	}
	
	// return two words before the given string in the text
	public String getTwoWordsBeforeSubstring(String substring){
		return StringUtil.getTwoWordsBeforeSubstring(text,substring);
	}
	
	// delete all escape characters in the text
	public void deleteEscapeCharaster(){
		text = text.replaceAll(TAG_SYMBOL_WITH_ESCAPE, LOCATION_SYMBOL);
		text = text.replaceAll(LOCATION_SYMBOL_WITH_ESCAPE, TAG_SYMBOL);
	}
	
	// if the whole text is quoted, then delete the quotation marks
	public void deleteFullQuote(){
		text = StringUtil.trimString(StringUtil.removeFullQuote(text));
	}
	
	public boolean isEmpty(){
		return text.equals(StringUtil.EMPTY_STRING);
	}
	
	public void trim(){
		text = StringUtil.trimString(text);
	}
	
	// delete given string from the text
	public void deleteSubstring(String str){
		text = text.replace(str, StringUtil.EMPTY_STRING);
		trim();
	}
	
	// change the first letter of the text to upper case
	public void formatText(){
		if(text.length()>0){
			text = Character.toUpperCase(text.charAt(0)) + text.substring(1); 
		}
	}
}

	// End of segment: todo\model\Message.java





	/**
	 * origin: todo\model\MessageTest.java
	 */

public class MessageTest {

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void test() {
		String text = "This is a test message";
		String newText = "This is the new message text";
		Message msg = new Message(text);
		
		assertFalse(msg.isEmpty());
		assertEquals(msg.getText(), text);
		
		msg.setText(newText);
		assertEquals(msg.getText(), newText);
		
		// text remove full quotation
		msg.setText("\""+newText+"\"");
		msg.deleteFullQuote();
		assertEquals(msg.getText(), newText);
		
		// test delete substring
		String stringContainSubstring = "this is a string";
		msg.setText(stringContainSubstring);
		msg.deleteSubstring("a");
		assertEquals(msg.getText(), "this is string");
		
		// test format text
		String stringWithoutCapitalization = "a new string";
		msg.setText(stringWithoutCapitalization);
		msg.formatText();
		assertEquals(msg.getText(), "A new string");
		
		// test correct date format
		String dateString = "13/6/2014";
		msg.setText(dateString);
		msg.correctDateFormat();
		assertEquals(msg.getText(), "6/13/2014");
		
		// test without quotation
		String stringWithQuotation = "This \"string\" has quotation";
		msg.setText(stringWithQuotation);
		assertEquals(msg.withoutQuotation(), "This has quotation");
		
		// test get word before string
		String aNormalString = "Finish homeword due by monday";
		msg.setText(aNormalString);
		assertEquals(msg.getWordBeforeSubstring("monday"), "by");
		assertEquals(msg.getTwoWordsBeforeSubstring("monday"), "due by");
	}

}

	// End of segment: todo\model\MessageTest.java





	/**
	 * origin: todo\nlp\NLP.java
	 */

/**
 * There are four parsers in an instance of NLP:
 * Add Parser, Update Parser, Index Parser, and General parser
 */
public class NLP {
	private static NLP NLPSingleton = null;
	private static String TAG = "NLP";

	private NLP(){
	}
	
	/**
	 * Singleton method for getting a NLP instance
	 * @return NLP instance
	 */
	public static NLP getInstance(){
		if(NLPSingleton == null){
			NLPSingleton = new NLP();
		}
		return NLPSingleton;
	}
	
	/**
	 *  ADD PARSER
	 *  extract date/time, location, tags, and description information from user input
	 * @param msg: the content part of an add command, contains description, 
	 * 				date/time (optional), location (optional), tags (optional)
	 * @return add command
	 * @throws ParseException 
	 * @throws IOException 
	 * @throws SAXException 
	 * @throws ParserConfigurationException 
	 * @throws DOMException 
	 * @throws Exception 
	 */
	public AddCommand addParser(String msg) throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException{		
		ArrayList<String> tagList;
		List<DateTime> dateTimeList;
		String location;
		
		//LogUtil.Log(TAG, "Start NLP add parser");
		// Create a message object to go through info extraction process
		Message message = new Message(msg);
		
		// step1 correct date format
		message.correctDateFormat();
		// step2 find tags
		tagList = NLPUtil.extractTags(message);
		// step3 find location
		location = NLPUtil.extractLocation(message);
		// step4 find possible date time
		dateTimeList = NLPUtil.extractDateTime(message);
		// step5 delete escape characters
		message.deleteEscapeCharaster();
		// step6 delete whole sentence quotation marks
		message.deleteFullQuote();
		// step7 format message as description
		message.trim();
		message.formatText();

		AddCommand addCommand = new AddCommand();
		addCommand.setDescription(message.getText());
		addCommand.setStart(dateTimeList.get(0));
		addCommand.setDue(dateTimeList.get(1));
		addCommand.setLocation(location);
		addCommand.setTagList(tagList);
		
		return addCommand;
	}
	
	/**
	 * UPDATE PARSER
	 * @param item : the item to be updated
	 * @param msg : user input, contain following update info
	 * 				fully quoted as description
	 * 				start with @ to update location
	 * 				start with # to update tags
	 * 				contain date/time to update date/time
	 * 				clean command to clean corresponding field
	 * @return update command
	 */
	public UpdateCommand updateParser(Item item, String msg){
		List<DateTime> dateTimeList;
		ArrayList<String> tagList;
		String location;
		
		//LogUtil.Log(TAG, "Start NLP update parser");
		UpdateCommand updateCommand = new UpdateCommand();
		updateCommand.setItem(item);
		
		Message message = new Message(msg);
		
		// set update start/due date/time
		message.correctDateFormat();
		dateTimeList = NLPUtil.extractDateTime(message);
		updateCommand.setStart(dateTimeList.get(0));
		updateCommand.setDue(dateTimeList.get(1));
		
		// set update location
		location = NLPUtil.extractLocation(message);
		updateCommand.setLocation(location);
		
		// set update tags
		tagList = NLPUtil.extractTags(message);
		updateCommand.setTagList(tagList);
		
		// set update description
		if (StringUtil.isFullQuote(msg)){
			updateCommand.setDescription(StringUtil.removeFullQuote(msg));
		}
		
		// clean command
		if (Arrays.asList(NLPConfig.updateDeleteStart).contains(msg)){
			// clean start date/time
			updateCommand.setUpdateStart();
		}
		if (Arrays.asList(NLPConfig.updateDeleteDue).contains(msg)){
			// clean due date/time
			updateCommand.setUpdateDue();
		}
		if (Arrays.asList(NLPConfig.updateDeleteDate).contains(msg)){
			// clean start & due date/time
			updateCommand.setUpdateStart();
			updateCommand.setUpdateDue();
		}
		if (Arrays.asList(NLPConfig.updateDeleteLocation).contains(msg)){
			// clean location
			updateCommand.setUpdateLocation();
		}
		if (Arrays.asList(NLPConfig.updateCleanTag).contains(msg)){
			// clean tags
			updateCommand.setCleanTag();
		}
		
		return updateCommand;
	}
	
	/**
	 * INDEX PARSER
	 * index parser convert a string of indices into a list of integer
	 * the final list is sorted and with no duplicates
	 * @param indices the string of indices in natural language
	 * @return a array list of integer
	 * @throws DOMException
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 * @throws ParseException
	 */
	public ArrayList<Integer> batchIndexParser(String indices) throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException{
		//LogUtil.Log(TAG, "Start NLP index parser");
		return NLPUtil.readIndexList(indices);
	}
	
	/**
	 * GENERAL PARSER
	 * @param input
	 * @return if the input is in library, return standard command, otherwise, return original string
	 */
	public String generalParser(String input){
		//LogUtil.Log(TAG, "Start NLP general parser");
		return NLPLibrary.getInstance().parse(input);
	}

}

	// End of segment: todo\nlp\NLP.java





	/**
	 * origin: todo\nlp\NLPConfig.java
	 */

/**
 * This class configures all the keywords used by NLP
 */
public class NLPConfig {
	// Date/time keywords
	// these key words are wrongly interpreted by Natty
	// so filter them out
	public static final String[] filterOut = {"eve","sun", "mon", "wed", "sat", "fri"};
	public static final String[] nattyHoliday = {
		"April Fool's Day",
		"Black Friday",
		"Christmas Day",
		"Christmas Eve",
		"Columbus Day (US-OPM)",
		"Earth Day",
		"Easter Sunday",
		"Father's Day",
		"Flag Day",
		"Good Friday",
		"Groundhog's Day",
		"Halloween",
		"Independence Day",
		"Kwanzaa",
		"Labor Day",
		"Martin Luther King Jr.'s Day",
		"Memorial Day",
		"Mother's Day",
		"New Year's Day",
		"New Year's Eve",
		"Patriot Day",
		"President's Day",
		"St. Patrick's Day",
		"Tax Day",
		"Thanksgiving Day",
		"US General Election",
		"Valentine's Day",
		"Veteran's Day"};
	public static final String[] preStart = {"from", "on", "at"};
	public static final String[] preDue = {"by", "by:", "before", "due", "in", "due on", "due in", "due by", "due at", "due from"};
	public static final String[] timeKeyword = {"EXPLICIT_TIME", "minute", "hour"};
	public static final String keywordAll = "all";
	
	// update clean attribute command
	public static final String[] updateDeleteStart = {"no start"};
	public static final String[] updateDeleteDue = {"no due"};
	public static final String[] updateDeleteDate = {"no date"};
	public static final String[] updateDeleteLocation = {"no location"};
	public static final String[] updateCleanTag = {"no tag", "clean tag", "clean tags"};
}

	// End of segment: todo\nlp\NLPConfig.java





	/**
	 * origin: todo\nlp\NLPLibrary.java
	 */

/**
 * This class is used by NLP general parser.
 * Match a command that cannot be determined with a valid command
 *
 */
public class NLPLibrary {
	
	private static HashMap<String, String> library = new HashMap<String, String>();
	private static NLPLibrary NLPLibrarySingpleton;
	
	private NLPLibrary(){
	}
	
	public static NLPLibrary getInstance(){
		if(NLPLibrarySingpleton == null){
			NLPLibrarySingpleton = new NLPLibrary();
			initLibrary();
		}
		return NLPLibrarySingpleton;
	}
	
	// initialize library
	private static void initLibrary(){
		library.put("just did everything", "done all");
		library.put("kill the whole shit", "delete all");
		library.put("wtf did i do", "undo");
		library.put("go back", "undo");
		library.put("shut down", "exit");
	}
	
	public String parse(String str){
		String value = library.get(str);
		if (value != null) {
		    return library.get(str);
		}
		// if cannot find any match in library, then return the original string
		return str;
	}
}

	// End of segment: todo\nlp\NLPLibrary.java





	/**
	 * origin: todo\nlp\NLPTest.java
	 */

public class NLPTest {

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void addParserTest() throws Exception {
		
		Message message = new Message("participate event @soc from 11 nov to 10 dec #tag #gat");
		
		// step1 correct date format
		message.correctDateFormat();
		// step2 find possible date time
		List<DateTime> dateTimeList = NLPUtil.extractDateTime(message);
		assertEquals(dateTimeList.get(0).toString(), "2014-11-11");
		assertEquals(dateTimeList.get(1).toString(), "2014-12-10");
		// step3 find location
		assertEquals(NLPUtil.extractLocation(message), "soc");
		// step4 find tags
		assertEquals(NLPUtil.extractTags(message).get(1), "gat");
		// step5 delete escape characters
		message.deleteEscapeCharaster();
		// step6 delete whole sentence quotation marks
		message.deleteFullQuote();
		// step7 trim and format message as description
		message.trim();
		message.formatText();
		assertEquals(message.getText(), "Participate event");
		
	}
	
	@Test
	public void indexParserTest() throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException {
		// is integer -> trim string
		NLP nlp = NLP.getInstance();
		String input = "1,3,5,3-6,2";
		ArrayList<Integer> indexes = nlp.batchIndexParser(input);
		int[] result = convertIntegers(indexes);
		int[] correct = new int[]{1,2,3,4,5,6};
		assertArrayEquals(result, correct);
	}
	
	@Test
	public void StringUtilTest(){
		// remove quoted content
		String toRemoveQuoted = "Watch movie \"The Day After Tomorrow\"";
		assertEquals(StringUtil.removeQuoted(toRemoveQuoted), "Watch movie");
		
		// is integer
		assertTrue(StringUtil.isInteger("3"));
		assertFalse(StringUtil.isInteger("a"));
		
		// get the word before the substring
		String toFindString = "Finish the project by next monday";
		String sub = "next monday";
		assertEquals(StringUtil.getWordBeforeSubstring(toFindString, sub), "by");
		
		// is full quote
		String quote1 = "\"This is string is fully quoted\"";
		String quote2 = "This \"string\" is not fully quoted";
		String quote3 = "There is no quotation mark in this string";
		assertTrue(StringUtil.isFullQuote(quote1));
		assertFalse(StringUtil.isFullQuote(quote2));
		assertFalse(StringUtil.isFullQuote(quote3));
		
		// remove full quote
		String strToBeQuoted = "A test string";
		String strQuoted = "\""+strToBeQuoted+"\"";
		assertEquals(StringUtil.removeFullQuote(strQuoted), strToBeQuoted);
		
		// find bracket location
		String strWithLocation = "Meet Mark @(Central Park)";
		assertEquals(StringUtil.getBracketLocation(strWithLocation), "@(Central Park)");
		
		// get first word
		String strWithCommand = "add do exercise";
		assertEquals(StringUtil.getFirstWord(strWithCommand), "add");
		
		// correct date format, from dd/mm to mm/dd
		assertEquals(StringUtil.correctDateFormat("30/12"), "12/30");
		assertEquals(StringUtil.correctDateFormat("5/12"), "5/12");
		assertEquals(StringUtil.correctDateFormat("25/7/14"), "7/25/14");
	}
	
	/**
	 *  For index Parser Test
	 * @param integers
	 * @return
	 */
	public static int[] convertIntegers(List<Integer> integers)
	{
	    int[] ret = new int[integers.size()];
	    for (int i=0; i < ret.length; i++)
	    {
	        ret[i] = integers.get(i).intValue();
	    }
	    return ret;
	}
}

	// End of segment: todo\nlp\NLPTest.java





	/**
	 * origin: todo\nlp\NLPUtil.java
	 */

/**
 * This class contains all the utility methods used by NLP
 */
public class NLPUtil {
	private static String TAG = "NLPUtil";
	private static String DELIMITER_COMMA = ",";
	private static String DELIMITER_SLASH = "/";
	private static String DELIMITER_SPACE = " ";
	
	public static Parser parser = new Parser();
	
	// Extractors
	
	/**
	 * Extract date time from a given string
	 * @param msg Message object that may contain date/time text
	 * @return a list of date/time
	 */
	protected static List<DateTime> extractDateTime(Message msg){
		List<DateTime> dateTimeList = new ArrayList<DateTime>();
		List<DateGroup> groups = NLPUtil.getDateGroups(msg.withoutQuotation());
		
		// initialize start and due date time
		dateTimeList.add(null);
		dateTimeList.add(null);
		
		if (groups.size() != 0){
			// there is date/time in the command
			DateGroup group = groups.get(0);
			String groupText = group.getText();
			LogUtil.Log(TAG, "Detect data/time: "+groupText);
			dateTimeList = NLPUtil.getDateTime(group);
			String wordBeforeDate = msg.getWordBeforeSubstring(groupText);
			String twoWordBeforeDate = msg.getTwoWordsBeforeSubstring(groupText);
			// if the word(s) before the date/time text is a due type preposition
			if (Arrays.asList(NLPConfig.preDue).contains(twoWordBeforeDate)
					|| Arrays.asList(NLPConfig.preDue).contains(wordBeforeDate)){
				// exchange start time and due time
				dateTimeList.add(dateTimeList.remove(0));
			}
			NLPUtil.deleteDateTimeText(msg, groupText);
		}else{
			LogUtil.Log(TAG, "No date time detected");
		}
		return dateTimeList;
	}
	
	/**
	 * Extract location
	 * There are two type of location:
	 * 1. Long location: @(long location)
	 * 2. Normal location: @location
	 * @param msg
	 * @return location string
	 */
	protected static String extractLocation(Message msg){
		String location = "";
		String locationString = StringUtil.getBracketLocation(msg.getText());
		// look for long location (location with more than one word)
		if (locationString.length() > 2){
			location = locationString.substring(2, locationString.length()-1);
			msg.deleteSubstring(locationString);
			msg.trim();
			return location;
		}
		msg.trim();
		// look for one-word location
		String[] strArray = msg.getText().split(" ");
		// find all words that start with "@" from the array
		for(int i = strArray.length-1; i >= 0 ; i--){
			if (strArray[i].length() > 1 && strArray[i].charAt(0) == '@'){
				location = strArray[i].substring(1);
				msg.deleteSubstring(strArray[i]);
			}
		}
		return location;
	}
	
	/**
	 * Extract tags
	 * Tags are all the words after #
	 * @param msg
	 * @return array list of tags
	 */
	protected static ArrayList<String> extractTags(Message msg){
		ArrayList<String> tagList = new ArrayList<String>();
		msg.trim();
		String[] strArray = msg.getText().split(" ");
		// look for all the word after a "#" in the string array
		for(int i = strArray.length-1; i >= 0 ; i--){
			if (strArray[i].length() > 1 && strArray[i].charAt(0) == '#'){
				String newTag = strArray[i].substring(1);
				// prevent duplicate tags
				if (!tagList.contains(newTag)){
					tagList.add(0, newTag);
				}
				msg.deleteSubstring(strArray[i]);
			}
		}
		return tagList;
	}
	
	/**
	 * Delete the date/time text and possible prepositions from Message
	 * @param msg: The message that contains the whole input
	 * @param groupText: Date/time text
	 */
	protected static void deleteDateTimeText(Message msg, String groupText){
		String wordBeforeDate = msg.getWordBeforeSubstring(groupText);
		String twoWordsBeforeDate = msg.getTwoWordsBeforeSubstring(groupText);
		// delete preposition before date
		if (Arrays.asList(NLPConfig.preStart).contains(twoWordsBeforeDate)
				|| Arrays.asList(NLPConfig.preDue).contains(twoWordsBeforeDate)){
			// the two word before the date/time is a preposition
			msg.setText(msg.getText().replace(twoWordsBeforeDate + " " + groupText, ""));
		}else if (Arrays.asList(NLPConfig.preStart).contains(wordBeforeDate)
				|| Arrays.asList(NLPConfig.preDue).contains(wordBeforeDate)){
			// the word before date/time is a preposition
			msg.setText(msg.getText().replace(wordBeforeDate + " " + groupText, ""));
		}else if( wordBeforeDate.length() >0 && wordBeforeDate.charAt(wordBeforeDate.length()-1) == ':'){
			// the word before date/time is a colon
			msg.setText(msg.getText().replace(": " + groupText, ""));
		}else {
			// no preposition
			msg.setText(msg.getText().replace(groupText, ""));
		}
	}
	
	/**
	 * Read indexes from a string
	 * E.g. "1,7,3-5,7-8" -> [1,3,4,5,7,8]
	 * @param str
	 * @return array list of integers
	 */
	protected static ArrayList<Integer> readIndexList(String str) throws DOMException, ParserConfigurationException, SAXException, IOException, ParseException{
		ArrayList<Integer> result = new ArrayList<Integer>();
		String delimiter;
		str = str.trim();
		if (str.equalsIgnoreCase(NLPConfig.keywordAll)){
			str = "1-"+Logic.getInstanceLogic().getItemListSize();
		}
		
		// Matching delimiter in the string with precedence： "," > "/" > " "
		if (str.contains(",")){
			delimiter = DELIMITER_COMMA;
		}else if (str.contains(DELIMITER_SLASH)){
			delimiter = DELIMITER_SLASH;
		}else{
			delimiter = DELIMITER_SPACE;
		}
		
		str = StringUtil.trimString(str);
		String[] arr = str.split(delimiter);
		// look for all indices
		for (String s: arr){
			s = s.trim();
			if (StringUtil.isInteger(s)){
				// Discrete indexes
				int newValue = Integer.valueOf(s);
				if(!result.contains(newValue)){
					result.add(newValue);
				}
			}else if (s.contains("-")){
				// Continuous indexes
				String[] subArr = s.split("-");
				if (subArr.length == 2 && StringUtil.isInteger(subArr[0]) && StringUtil.isInteger(subArr[1]) 
					&& Integer.valueOf(subArr[0]) < Integer.valueOf(subArr[1])){
					// the strings before and after "-" are integers
					// and the first integer is greater than the second integer
					for (int i = Integer.valueOf(subArr[0]); i < (Integer.valueOf(subArr[1])+1); i++){
						// generate integers in the range
						if(!result.contains(i)){
							result.add(i);
						}
					}
				}
			}
		}
		Collections.sort(result);
		return result;
	}
	
	/**
	 * Get list of date/time
	 * Process the raw date/time data got from Natty
	 * @param group DateGruop
	 * @return a list of DateTime
	 */
	protected static List<DateTime> getDateTime(DateGroup group){
		String DATE_TIME_SEPARATOR = "DATE_TIME ";
		List<DateTime> dateTimeList = new ArrayList<DateTime>();
		Date startDate = null;
		Date dueDate = null;
		boolean startDateHasTime = false;
		boolean dueDateHasTime = false;
		DateTime startDateTime = null;
		DateTime dueDateTime = null;
		String syntaxTree;
		
		if (group.getDates().size() == 2){
			// has both start time and due time
			startDate = group.getDates().get(0);
			dueDate = group.getDates().get(1);
			// syntaxTree is a string that contains the hierarchies of date/time
			syntaxTree = group.getSyntaxTree().toStringTree();
			String[] syntaxTreeArray = syntaxTree.split(DATE_TIME_SEPARATOR);
			if(StringUtil.stringContainListSubstring(syntaxTreeArray[1], NLPConfig.timeKeyword)){
				// if start date has time
				startDateHasTime = true;
			}
			if(StringUtil.stringContainListSubstring(syntaxTreeArray[2], NLPConfig.timeKeyword)){
				// if due date has time
				dueDateHasTime = true;
			}
		}else if(group.getDates().size() == 1){
			// only start time or due time
			syntaxTree = group.getSyntaxTree().toStringTree();
			if(StringUtil.stringContainListSubstring(syntaxTree, NLPConfig.timeKeyword)){
				// if has time
				startDateHasTime = true;
			}
			startDate = group.getDates().get(0);
		}
		
		// build DateTime for startDate & dueDate
		if (startDate != null){
			startDateTime = new DateTime(startDate, startDateHasTime);
		}
		if (dueDate != null){
			dueDateTime = new DateTime(dueDate, dueDateHasTime);
		}
		dateTimeList.add(startDateTime);
		dateTimeList.add(dueDateTime);
		return dateTimeList;
	}
	
	
	/**
	 * Look for DateGroup by using Natty
	 * Add all the DateGroups found from a given string into a list
	 * @param msgToDetectDate the given string
	 * @return the list of DateGroups
	 */
	protected static List<DateGroup> getDateGroups(String msgToDetectDate){
		// escape all the Natty holiday cases
		msgToDetectDate = StringUtil.stringDeleteListSubstring(msgToDetectDate, NLPConfig.nattyHoliday);
		
		// call Natty to find date/time
		List<DateGroup> groups = parser.parse(msgToDetectDate);
		String tempTextToDetect = ""; // used to store the previous step's text
		
		// escape wrong date time parse by Natty
		// skip when the date text is an integer
		// or a word in the filterOut list
		while (groups.size() > 0 && (StringUtil.isInteger(groups.get(0).getText())
				|| Arrays.asList(NLPConfig.filterOut).contains(groups.get(0).getText()))){
			
			String currentTextToDetect = groups.get(0).getText();
			LogUtil.Log(TAG, "Text to detect data/time: "+currentTextToDetect);
			if (currentTextToDetect.equals(tempTextToDetect)){
				// if the new date/time text found is the same as the previous step
				groups.clear();
				break;
			}
			// record the current text to prevent infinite loop
			tempTextToDetect = currentTextToDetect;
			msgToDetectDate = msgToDetectDate.replace(groups.get(0).getText(), "");
			if(msgToDetectDate.equals("")){
				// nothing found in the text
				groups.clear();
				break;
			}
			// call Natty to look for DateGrup
			groups = parser.parse(msgToDetectDate);
		}
		
		// escape when the first integer of the date/time is a part of the description
		// if the first char is an integer, and there is no space before it
		// the is to prevent Natty get number text which is part of the description
		if (groups.size() > 0){
			String groupText = groups.get(0).getText();
			LogUtil.Log(TAG, "Group text: "+groupText);
			if( StringUtil.isInteger(groupText.charAt(0)+"") 
					&& msgToDetectDate.indexOf(groupText) > 0
					&& msgToDetectDate.charAt(msgToDetectDate.indexOf(groupText)-1) != ' '){
				msgToDetectDate = groups.get(0).getText().substring(1);
				//delete all the subsequent integers
				while (StringUtil.isInteger(msgToDetectDate.charAt(0)+"")){
					msgToDetectDate = msgToDetectDate.substring(1);
				}
				groups = parser.parse(msgToDetectDate);
			}
		}
		
		return groups;
	}

}

	// End of segment: todo\nlp\NLPUtil.java





	/**
	 * origin: todo\util\StringUtil.java
	 */

public class StringUtil {

	public static String EMPTY_STRING = "";
	
	/**
	 * This method check a string contains any string in a string array
	 * @param str: the string to be checked
	 * @param list: a string array
	 * @return boolean
	 */
	public static boolean stringContainListSubstring(String str, String[] list){
		for (int i = 0; i < list.length; i++){
			if (str.contains(list[i])){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * This method delete all the substring in a list from a given string
	 * @param str: the string to be processed
	 * @param list: a string array
	 * @return processed string
	 */
	public static String stringDeleteListSubstring(String str, String[] list){
		for (int i = 0; i < list.length; i++){
			String currentSubstring = list[i];
			if (str.contains(currentSubstring)){
				str = str.replaceAll(currentSubstring, "");
			}
		}
		return str;
	}
	
	/**
	 * Delete all the content quoted in a string
	 * E.g. this is "a quoted" string -> this is string
	 * @param str original string
	 * @return cleaned string
	 */
	public static String removeQuoted(String str){
		if(str.contains("\"") && str.replaceAll("[^\"]", "").length() % 2 == 0) {
			// there is quotation, and the number of them is even
			String toDelete = "\"";
			int idx = str.indexOf('"');
			while(idx+1<str.length() && str.charAt(idx+1) != ('\"')){
				toDelete += str.charAt(idx+1);
				idx++;
			}
			if(idx+1<str.length() && str.charAt(idx+1) == '\"'){
				toDelete += "\"";
				str = str.replace(toDelete, "");
			}
			return trimString(removeQuoted(str));
		}else{
			return trimString(str);
		}
	}
	
	/**
	 * Check if a string can be converted into an integer
	 * @param s string
	 * @return boolean
	 */
	public static boolean isInteger(String s) {
	    try { 
	        Integer.parseInt(s); 
	    } catch(NumberFormatException e) { 
	        return false; 
	    }
	    return true;
	}
	
	/**
	 * Get the word before the given substring
	 * @param str original string
	 * @param sub substring
	 * @return the word string before the substring
	 */
	public static String getWordBeforeSubstring(String str, String sub){
		int idx = str.lastIndexOf(sub)-2;
		String result = "";
		// stop when encounter a space
		while (idx >= 0 && str.charAt(idx) != ' '){
			result = str.charAt(idx) + result;
			idx--;
		}
		return result;
	}
	
	/**
	 * Get two words before the given substring
	 * @param str original string
	 * @param sub substring
	 * @return two words before the given substring
	 */
	public static String getTwoWordsBeforeSubstring(String str, String sub){
		int idx = str.lastIndexOf(sub)-2;
		int countSpace = 0;
		String result = "";
		// stop when encounter the second space
		while (idx >= 0 && !(countSpace == 1 && str.charAt(idx) == ' ')){
			if (str.charAt(idx) == ' '){
				countSpace++;
			}
			result = str.charAt(idx) + result;
			idx--;
		}
		return result;
	}
	
	/**
	 * Check if a string is fully quoted
	 * The start and end with quotation marks
	 * And there are only two quotation marks in the string
	 * @param str
	 * @return
	 */
	public static boolean isFullQuote(String str){
		if (str.length() > 1){
			if (str.charAt(0) == '\"' && str.charAt(str.length()-1) == '\"'){
				// start and end with quotation marks
				int count = 0;
				for(int i = 0; i < str.length(); i++){
					// count number of "
					if(str.charAt(i) == '\"'){
						count++;
					}
				}
				if (count == 2){
					// and only two quotation marks in the string
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * if there are only two quotation marks in the string
	 * and one is at the beginning, and the other is at the end
	 * then remove the two quotation marks
	 * @param str the original string
	 * @return string
	 */
	public static String removeFullQuote(String str){
		if (isFullQuote(str)){
			return str.substring(1, str.length()-1);
		}else{
			return str;
		}
	}
	
	/**
	 * get the location within a pair of brackets after @
	 * @param str original string
	 * @return "@(content)"
	 */
	public static String getBracketLocation(String str){
		String toDelete = "";
		if(str.contains("@(")) {
			// there is a long location in the string
			toDelete = "@(";
			int idx = str.indexOf("@(");
			
			// if there is an escape character
			if (idx - 1 >= 0 && str.charAt(idx-1) == '\\'){
				return getBracketLocation(str.substring(idx + 1, str.length()));
			}
			idx++;
			// add char until encounter a ')'
			while(idx + 1 < str.length() && str.charAt(idx + 1) != ')'){
				toDelete += str.charAt(idx + 1);
				idx++;
			}
			if(idx + 1 < str.length() && str.charAt(idx + 1) == ')'){
				toDelete += ")";
			}else{
				// to the end of the string, bracket is not matched
				toDelete = "";
			}
		}
		return toDelete;
	}
	
	public static String trimString(String str){
		return str.trim().replaceAll(" +", " ");
	}

	/**
	 * get the first word from a string
	 * if there is only one word in the string, return the word
	 * @param str: the given string : String
	 * @return the frist word : String
	 */
	public static String getFirstWord(String str) {
		String firstWord = str.trim().split("\\s+")[0];
		return firstWord;
	}
	
	/**
	 * Change dd/mm format to mm/dd
	 * @param String with posible dd/mm or dd/mm/yy date
	 * @return String with posible mm/dd or mm/dd/yy date
	 */
	public static String correctDateFormat(String str){
		String[] arr = str.split(" ");
		String first;
		String second;
		String third;
		for(int i = 0; i < arr.length; i++){
			String[] arr2 = arr[i].split("/");
			if (arr2.length == 3){
				// day/month/year format
				first = arr2[0];
				second = arr2[1];
				third = arr2[2];
				if (isInteger(first) && isInteger(second) && isInteger(third)){
					if(Integer.valueOf(first) > 12){
						// the first number should be day
						// construct the new date format
						String newDateString = second+"/"+first+"/"+third;
						str = str.replace(arr[i], newDateString);
					}
				}
			}else if (arr2.length == 2){
				// day/month format
				first = arr2[0];
				second = arr2[1];
				if (isInteger(first) && isInteger(second)){
					if(Integer.valueOf(first) > 12){
						// the first number should be day
						// construct the new date format
						String newDateString = second+"/"+first;
						str = str.replace(arr[i], newDateString);
					}
				}
			}
		}
		return str;
	}

}

	// End of segment: todo\util\StringUtil.java





